package model;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamClass;
import java.io.ObjectStreamException;
import java.io.Serializable;
import java.util.Date;

//public class Person extends ObjectInputStream {
public class Person implements Serializable {

    public static final long serialVersionUID = 0 * 12345678L;
    public String name;
    public Date birthday;


    public Person() throws IOException {
        super();
    }


    private void writeObject(ObjectOutputStream out) throws IOException {
        out.defaultWriteObject();
        out.writeUTF(System.getProperty("user.name"));
    }

    private Object writeReplace() throws ObjectStreamException {
        return this;
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        in.defaultReadObject();
        System.out.println("Person was serialized by : \t" + in.readUTF());
    }

//    private Object readResolve() throws ObjectStreamException {
//        return this;
//    }

    protected Class<?> resolveClass(ObjectStreamClass desc) throws Exception {
//        try {
        if ((!(desc.getName().equals(Person.class.getName())))) {
            throw new Exception("Unauthorized deserialization attempt " + desc.getName());
        }
//        } catch (InstantiationException | IllegalAccessException e) {
//            throw new InvalidClassException("Invalid class of type " + desc.getName() +
//                    " used for cluster properties.");
//        }
        return resolveClass(desc);
    }
}