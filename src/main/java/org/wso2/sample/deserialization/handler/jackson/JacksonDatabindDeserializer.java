package org.wso2.sample.deserialization.handler.jackson;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
import org.wso2.sample.deserialization.model.CommandExecutor2;
import org.wso2.sample.deserialization.model.PhoneNumber;
import org.wso2.sample.deserialization.model.Student;

import java.io.Serializable;
import java.nio.file.Files;
import java.nio.file.Paths;

public class JacksonDatabindDeserializer {

    public static void main(String[] args) throws Exception {
        JacksonDatabindDeserializer illegalTypesCheckTest = new JacksonDatabindDeserializer();
        illegalTypesCheckTest.deserialize();
    }

    public void deserialize() throws Exception {
        //read json file data
        byte[] jsonData = Files.readAllBytes(Paths.get("src/main/resources/student.json"));

        /**
         * Enable global polymorphic type handling using enableDefaultTyping() method
         */
        ObjectMapper mapper = new ObjectMapper();
//        mapper.enableDefaultTyping();

        /**
         * Set PolymorphicTypeValidator to mapper while enabling polymorphic type handling using globally via
         * activateDefaultTyping() method. Jackson 2.10 onward, enableDefaultTyping() method is deprecated and
         * activateDefaultTyping() is introduced to support the whitelisting for allowed object types
         */
//        PolymorphicTypeValidator ptv =
//                BasicPolymorphicTypeValidator.builder()
//                        .allowIfSubType(Student.class)
//                        .build();
//        mapper.activateDefaultTyping(ptv, ObjectMapper.DefaultTyping.NON_FINAL);

        /**
         * Set PolymorphicTypeValidator to mapper when enabling polymorphic type handling using JSONType annotation
         */
//        PolymorphicTypeValidator ptv =
//                BasicPolymorphicTypeValidator.builder()
//                        .allowIfSubType(Student.class)
//                        .build();
//        ObjectMapper mapper = JsonMapper.builder()
//                .polymorphicTypeValidator(ptv)
//                .build();
        try {
            //deserialize the byte array to the given object
            Student student = mapper.readValue(jsonData, Student.class);

            System.out.println("Student name : " + student.phoneNumber);
        } catch (JsonMappingException e) {
            System.out.println("Prevented for security reasons\n :" + e);
        }
    }
}
